# -*- coding: utf-8 -*-
"""task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17cW4-HAk7qyjo7aNmZH1kYGWkOHXjDh0

#                                          ***GRIP - THE SPARKS FOUNDATION*** MAY 2021

####  DATA SCIENCE & BUSINESS ANALYTICS INTERNSHIP

**Author**: **Bhavana P**

#### **TASK 01 : Predict the percentage of an student based on the no. of study hours.**

In this task, a simple linear regression is performed using the two variables hours and scores to predict the percentage of an student based on the no.of study hours.

IDE : GOOGLE COLAB

PROGRAMMING LANGUAGE : PYTHON
"""

#IMPORTING THE REQUIRED LIBRARIES

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# READING THE DATA FROM ONLINE SOURCE

URL = "http://bit.ly/w-data"
data = pd.read_csv(URL)
print("SUCCESSFULLY IMPORTED DATA INTO CONSOLE")

# DATA EXPLORATION

data.head()

data.tail()

# checking for any null values

data.isnull().sum()

data.describe()

# CORRELATION BETWEEN VARIABLES(HOURS AND SCORES)


data.corr()

# DATA VISUALIZATION SCATTER PLOT

data.plot(kind='scatter',x='Hours',y='Scores',style='o',color='r')
plt.title("Hours vs percentage")
plt.xlabel("The Hours Studied")
plt.ylabel("The Percentage Score")
plt.show()

# MODELLING OF DATA

x = data.iloc[:,:-1].values
y=data.iloc[:,1].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression( )
regressor.fit(x_train,y_train)

print("Training complted!!!!")

print(x_test)
y_pred = regressor.predict(x_test)

df= pd.DataFrame({"Actual" : y_test,"Predicted": y_pred})
df

"""SAMPLE OUTPUT WHEN STUDENT STUDIES FOR 9.25HRS/DAY"""

hours = [[9.25]]
own_pred = regressor.predict(hours)
print("Number of hours={}".format(hours))
print("Prediction SCore={}".format(own_pred[0]))

# EVALUATION OF DATA


from sklearn import metrics

print("Mean Absolute Error:",metrics.mean_absolute_error(y_test,y_pred))

